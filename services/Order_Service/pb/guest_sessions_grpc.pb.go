// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: guest_sessions.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GuestSessionService_CreateGuestSession_FullMethodName = "/guest_sessions.GuestSessionService/CreateGuestSession"
	GuestSessionService_GetGuestSession_FullMethodName    = "/guest_sessions.GuestSessionService/GetGuestSession"
	GuestSessionService_UpdateGuestSession_FullMethodName = "/guest_sessions.GuestSessionService/UpdateGuestSession"
	GuestSessionService_DeleteGuestSession_FullMethodName = "/guest_sessions.GuestSessionService/DeleteGuestSession"
	GuestSessionService_CheckGuestStatus_FullMethodName   = "/guest_sessions.GuestSessionService/CheckGuestStatus"
)

// GuestSessionServiceClient is the client API for GuestSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuestSessionServiceClient interface {
	CreateGuestSession(ctx context.Context, in *CreateGuestSessionRequest, opts ...grpc.CallOption) (*CreateGuestSessionResponse, error)
	GetGuestSession(ctx context.Context, in *GetGuestSessionRequest, opts ...grpc.CallOption) (*GetGuestSessionResponse, error)
	UpdateGuestSession(ctx context.Context, in *UpdateGuestSessionRequest, opts ...grpc.CallOption) (*UpdateGuestSessionResponse, error)
	DeleteGuestSession(ctx context.Context, in *DeleteGuestSessionRequest, opts ...grpc.CallOption) (*DeleteGuestSessionResponse, error)
	CheckGuestStatus(ctx context.Context, in *CheckGuestStatusRequest, opts ...grpc.CallOption) (*CheckGuestStatusResponse, error)
}

type guestSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuestSessionServiceClient(cc grpc.ClientConnInterface) GuestSessionServiceClient {
	return &guestSessionServiceClient{cc}
}

func (c *guestSessionServiceClient) CreateGuestSession(ctx context.Context, in *CreateGuestSessionRequest, opts ...grpc.CallOption) (*CreateGuestSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGuestSessionResponse)
	err := c.cc.Invoke(ctx, GuestSessionService_CreateGuestSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestSessionServiceClient) GetGuestSession(ctx context.Context, in *GetGuestSessionRequest, opts ...grpc.CallOption) (*GetGuestSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGuestSessionResponse)
	err := c.cc.Invoke(ctx, GuestSessionService_GetGuestSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestSessionServiceClient) UpdateGuestSession(ctx context.Context, in *UpdateGuestSessionRequest, opts ...grpc.CallOption) (*UpdateGuestSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGuestSessionResponse)
	err := c.cc.Invoke(ctx, GuestSessionService_UpdateGuestSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestSessionServiceClient) DeleteGuestSession(ctx context.Context, in *DeleteGuestSessionRequest, opts ...grpc.CallOption) (*DeleteGuestSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGuestSessionResponse)
	err := c.cc.Invoke(ctx, GuestSessionService_DeleteGuestSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestSessionServiceClient) CheckGuestStatus(ctx context.Context, in *CheckGuestStatusRequest, opts ...grpc.CallOption) (*CheckGuestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckGuestStatusResponse)
	err := c.cc.Invoke(ctx, GuestSessionService_CheckGuestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuestSessionServiceServer is the server API for GuestSessionService service.
// All implementations must embed UnimplementedGuestSessionServiceServer
// for forward compatibility.
type GuestSessionServiceServer interface {
	CreateGuestSession(context.Context, *CreateGuestSessionRequest) (*CreateGuestSessionResponse, error)
	GetGuestSession(context.Context, *GetGuestSessionRequest) (*GetGuestSessionResponse, error)
	UpdateGuestSession(context.Context, *UpdateGuestSessionRequest) (*UpdateGuestSessionResponse, error)
	DeleteGuestSession(context.Context, *DeleteGuestSessionRequest) (*DeleteGuestSessionResponse, error)
	CheckGuestStatus(context.Context, *CheckGuestStatusRequest) (*CheckGuestStatusResponse, error)
	mustEmbedUnimplementedGuestSessionServiceServer()
}

// UnimplementedGuestSessionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGuestSessionServiceServer struct{}

func (UnimplementedGuestSessionServiceServer) CreateGuestSession(context.Context, *CreateGuestSessionRequest) (*CreateGuestSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuestSession not implemented")
}
func (UnimplementedGuestSessionServiceServer) GetGuestSession(context.Context, *GetGuestSessionRequest) (*GetGuestSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestSession not implemented")
}
func (UnimplementedGuestSessionServiceServer) UpdateGuestSession(context.Context, *UpdateGuestSessionRequest) (*UpdateGuestSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuestSession not implemented")
}
func (UnimplementedGuestSessionServiceServer) DeleteGuestSession(context.Context, *DeleteGuestSessionRequest) (*DeleteGuestSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuestSession not implemented")
}
func (UnimplementedGuestSessionServiceServer) CheckGuestStatus(context.Context, *CheckGuestStatusRequest) (*CheckGuestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGuestStatus not implemented")
}
func (UnimplementedGuestSessionServiceServer) mustEmbedUnimplementedGuestSessionServiceServer() {}
func (UnimplementedGuestSessionServiceServer) testEmbeddedByValue()                             {}

// UnsafeGuestSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuestSessionServiceServer will
// result in compilation errors.
type UnsafeGuestSessionServiceServer interface {
	mustEmbedUnimplementedGuestSessionServiceServer()
}

func RegisterGuestSessionServiceServer(s grpc.ServiceRegistrar, srv GuestSessionServiceServer) {
	// If the following call pancis, it indicates UnimplementedGuestSessionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GuestSessionService_ServiceDesc, srv)
}

func _GuestSessionService_CreateGuestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSessionServiceServer).CreateGuestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestSessionService_CreateGuestSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSessionServiceServer).CreateGuestSession(ctx, req.(*CreateGuestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestSessionService_GetGuestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSessionServiceServer).GetGuestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestSessionService_GetGuestSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSessionServiceServer).GetGuestSession(ctx, req.(*GetGuestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestSessionService_UpdateGuestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSessionServiceServer).UpdateGuestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestSessionService_UpdateGuestSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSessionServiceServer).UpdateGuestSession(ctx, req.(*UpdateGuestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestSessionService_DeleteGuestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSessionServiceServer).DeleteGuestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestSessionService_DeleteGuestSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSessionServiceServer).DeleteGuestSession(ctx, req.(*DeleteGuestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestSessionService_CheckGuestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGuestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestSessionServiceServer).CheckGuestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestSessionService_CheckGuestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestSessionServiceServer).CheckGuestStatus(ctx, req.(*CheckGuestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuestSessionService_ServiceDesc is the grpc.ServiceDesc for GuestSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuestSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guest_sessions.GuestSessionService",
	HandlerType: (*GuestSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGuestSession",
			Handler:    _GuestSessionService_CreateGuestSession_Handler,
		},
		{
			MethodName: "GetGuestSession",
			Handler:    _GuestSessionService_GetGuestSession_Handler,
		},
		{
			MethodName: "UpdateGuestSession",
			Handler:    _GuestSessionService_UpdateGuestSession_Handler,
		},
		{
			MethodName: "DeleteGuestSession",
			Handler:    _GuestSessionService_DeleteGuestSession_Handler,
		},
		{
			MethodName: "CheckGuestStatus",
			Handler:    _GuestSessionService_CheckGuestStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guest_sessions.proto",
}
