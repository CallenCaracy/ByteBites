type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  role: String!
  address: String
  phone: String
  isActive: String!
  age: Int!
  userType: String!
  pfp: String
  gender: String
  createdAt: String!
  updatedAt: String
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  role: String!
  address: String
  phone: String
  age: Int!
  userType: String!
  gender: String
}

input SignInInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  address: String
  phone: String
  age: Int
  userType: String
  gender: String
  pfp: String
  isActive: String
}

type TokenCheckResponse {
  id: ID!
  email: String!
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordResponse {
  success: Boolean!
  message: String
}

# Queries
extend type Query {
  getUserById(id: ID!): User
  getAuthenticatedUser: User!
  checkToken: TokenCheckResponse!
}

# Mutation
extend type Mutation {
  signUp(input: SignUpInput!): User!
  signIn(input: SignInInput!): AuthResponse!
  signInOnlyEmployee(input: SignInInput!): AuthResponse!
  signOut: Boolean!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse!
}