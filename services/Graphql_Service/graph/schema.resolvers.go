package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"Graphql_Service/graph/model"
	"context"
	"database/sql"
)

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	var user model.User

	query := `SELECT id, email, first_name, last_name, role, address, phone, is_active, created_at, updated_at FROM public.users WHERE id = $1`
	err := r.Resolver.DB1.QueryRow(query, id).Scan(
		&user.ID, &user.Email, &user.FirstName, &user.LastName,
		&user.Role, &user.Address, &user.Phone, &user.IsActive,
		&user.CreatedAt, &user.UpdatedAt,
	)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil // Return nil if user not found
		}
		return nil, err
	}
	return &user, nil
}

// GetMenuItemByID is the resolver for the getMenuItemById field.
func (r *queryResolver) GetMenuItemByID(ctx context.Context, id string) (*model.MenuItem, error) {
	var menuItem model.MenuItem

	query := `SELECT id, name, image_url, description, price, item_status, created_at, updated_at FROM menu_items WHERE id = $1`
	err := r.Resolver.DB2.QueryRow(query, id).Scan(
		&menuItem.ID, &menuItem.Name, &menuItem.ImageURL,
		&menuItem.Description, &menuItem.Price, &menuItem.ItemStatus,
		&menuItem.CreatedAt, &menuItem.UpdatedAt,
	)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &menuItem, nil
}

// GetTransactionRecord is the resolver for the getTransactionRecord field.
// GetTransactionRecord is the resolver for the getTransactionRecord field.

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
