package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.69

import (
	"Graphql_Service/graph/model"
	"Graphql_Service/pb"
	"context"
	"fmt"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// SignInOnlyEmployee is the resolver for the signInOnlyEmployee field.
func (r *mutationResolver) SignInOnlyEmployee(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	dialCtx, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()

	// Use grpc.DialContext for better control over connection lifecycle
	conn, err := grpc.DialContext(dialCtx, "localhost:50050", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, fmt.Errorf("failed to connect to gRPC server: %v", err)
	}
	defer conn.Close()

	authClient := pb.NewAuthServiceClient(conn)

	// Create the gRPC request.
	req := &pb.SignInOnlyEmployeeRequest{
		Email:    email,
		Password: password,
	}

	// Call the gRPC method.
	resp, err := authClient.SignInOnlyEmployee(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("failed to sign in employee: %v", err)
	}

	// Map the gRPC response to the GraphQL model.
	return &model.AuthPayload{
		AccessToken:  resp.AccessToken,
		RefreshToken: resp.RefreshToken,
		Error:        &resp.Error,
	}, nil

	// Return an appropriate value or error
	// return nil, fmt.Errorf("not implemented")
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	// Call your custom function that returns a pb.User.
	pbUser, err := r.Resolver.Query_getUser(ctx, id)
	if err != nil {
		return nil, err
	}

	// Map pb.User to model.User.
	return &model.User{
		ID:        pbUser.Id,
		Email:     pbUser.Email,
		FirstName: pbUser.FirstName,
		LastName:  pbUser.LastName,
		Role:      pbUser.Role,
		Address:   &pbUser.Address,
		Phone:     &pbUser.Phone,
		IsActive:  pbUser.IsActive,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
