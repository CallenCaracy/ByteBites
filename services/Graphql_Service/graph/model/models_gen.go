// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthResponse struct {
	AccessToken  string  `json:"accessToken"`
	RefreshToken string  `json:"refreshToken"`
	Error        *string `json:"error,omitempty"`
}

type Inventory struct {
	ID                string  `json:"id"`
	ItemName          string  `json:"itemName"`
	Quantity          int32   `json:"quantity"`
	Unit              string  `json:"unit"`
	LowStockThreshold int32   `json:"lowStockThreshold"`
	ExpiryDate        *string `json:"expiryDate,omitempty"`
	LastUpdated       string  `json:"lastUpdated"`
}

type MenuItem struct {
	ID                 string  `json:"id"`
	Name               string  `json:"name"`
	Description        *string `json:"description,omitempty"`
	Price              float64 `json:"price"`
	Category           *string `json:"category,omitempty"`
	AvailabilityStatus bool    `json:"availability_status"`
	ImageURL           *string `json:"image_url,omitempty"`
	CreatedAt          string  `json:"created_at"`
	UpdatedAt          *string `json:"updated_at,omitempty"`
}

type Mutation struct {
}

type NewMenuItem struct {
	Name               string  `json:"name"`
	Description        *string `json:"description,omitempty"`
	Price              float64 `json:"price"`
	Category           *string `json:"category,omitempty"`
	AvailabilityStatus bool    `json:"availability_status"`
	ImageURL           *string `json:"image_url,omitempty"`
}

type OrderQueue struct {
	ID          string      `json:"id"`
	OrderID     string      `json:"orderId"`
	Status      OrderStatus `json:"status"`
	Priority    int32       `json:"priority"`
	LastUpdated string      `json:"lastUpdated"`
}

type Query struct {
}

type SignInEmployeeInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignUpInput struct {
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Role      string  `json:"role"`
	Address   *string `json:"address,omitempty"`
	Phone     *string `json:"phone,omitempty"`
}

type UpdateMenuItem struct {
	Name               *string  `json:"name,omitempty"`
	Description        *string  `json:"description,omitempty"`
	Price              *float64 `json:"price,omitempty"`
	Category           *string  `json:"category,omitempty"`
	AvailabilityStatus *bool    `json:"availability_status,omitempty"`
	ImageURL           *string  `json:"image_url,omitempty"`
}

type UpdateUserInput struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Role      *string `json:"role,omitempty"`
	Address   *string `json:"address,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	IsActive  *bool   `json:"isActive,omitempty"`
}

type User struct {
	ID        string  `json:"id"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Role      string  `json:"role"`
	Address   *string `json:"address,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	IsActive  string  `json:"isActive"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

type OrderStatus string

const (
	OrderStatusCooking   OrderStatus = "cooking"
	OrderStatusPreparing OrderStatus = "preparing"
	OrderStatusReady     OrderStatus = "ready"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusCooking,
	OrderStatusPreparing,
	OrderStatusReady,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusCooking, OrderStatusPreparing, OrderStatusReady:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
