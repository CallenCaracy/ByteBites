// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type AuthResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type ForgotPasswordInput struct {
	Email string `json:"email"`
}

type ForgotPasswordResponse struct {
	Success bool    `json:"success"`
	Message *string `json:"message,omitempty"`
}

type CreateOrderInput struct {
	UserID          uuid.UUID               `json:"userId"`
	TotalPrice      float64                 `json:"totalPrice"`
	OrderStatus     *OrderStatus            `json:"orderStatus,omitempty"`
	OrderType       *OrderType              `json:"orderType,omitempty"`
	DeliveryAddress *string                 `json:"deliveryAddress,omitempty"`
	SpecialRequests *string                 `json:"specialRequests,omitempty"`
	Items           []*CreateOrderItemInput `json:"items"`
}

type CreateOrderItemInput struct {
	MenuItemID     uuid.UUID `json:"menuItemId"`
	Quantity       int32     `json:"quantity"`
	Price          float64   `json:"price"`
	Customizations *string   `json:"customizations,omitempty"`
}

type MenuItem struct {
	ID                 string  `json:"id"`
	Name               string  `json:"name"`
	Description        *string `json:"description,omitempty"`
	Price              float64 `json:"price"`
	Category           *string `json:"category,omitempty"`
	AvailabilityStatus bool    `json:"availability_status"`
	ImageURL           *string `json:"image_url,omitempty"`
	CreatedAt          string  `json:"created_at"`
	UpdatedAt          *string `json:"updated_at,omitempty"`
}

type Mutation struct {
}

type NewMenuItem struct {
	Name               string  `json:"name"`
	Description        *string `json:"description,omitempty"`
	Price              float64 `json:"price"`
	Category           *string `json:"category,omitempty"`
	AvailabilityStatus bool    `json:"availability_status"`
	ImageURL           *string `json:"image_url,omitempty"`
}

type Order struct {
	ID              uuid.UUID    `json:"id"`
	UserID          uuid.UUID    `json:"userId"`
	TotalPrice      float64      `json:"totalPrice"`
	OrderStatus     OrderStatus  `json:"orderStatus"`
	OrderType       *OrderType   `json:"orderType,omitempty"`
	DeliveryAddress *string      `json:"deliveryAddress,omitempty"`
	SpecialRequests *string      `json:"specialRequests,omitempty"`
	CreatedAt       *time.Time   `json:"createdAt,omitempty"`
	UpdatedAt       *time.Time   `json:"updatedAt,omitempty"`
	Items           []*OrderItem `json:"items"`
}

type OrderItem struct {
	ID             uuid.UUID  `json:"id"`
	OrderID        uuid.UUID  `json:"orderId"`
	MenuItemID     uuid.UUID  `json:"menuItemId"`
	Quantity       int32      `json:"quantity"`
	Price          float64    `json:"price"`
	Customizations *string    `json:"customizations,omitempty"`
	CreatedAt      *time.Time `json:"createdAt,omitempty"`
}

type Query struct {
}

type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignUpInput struct {
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Role      string  `json:"role"`
	Address   *string `json:"address,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	Age       int32   `json:"age"`
	UserType  string  `json:"userType"`
	Gender    *string `json:"gender,omitempty"`
}

type TokenCheckResponse struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

type UpdateMenuItem struct {
	Name               *string  `json:"name,omitempty"`
	Description        *string  `json:"description,omitempty"`
	Price              *float64 `json:"price,omitempty"`
	Category           *string  `json:"category,omitempty"`
	AvailabilityStatus *bool    `json:"availability_status,omitempty"`
	ImageURL           *string  `json:"image_url,omitempty"`
}

type UpdateOrderInput struct {
	ID              uuid.UUID    `json:"id"`
	TotalPrice      *float64     `json:"totalPrice,omitempty"`
	OrderStatus     *OrderStatus `json:"orderStatus,omitempty"`
	OrderType       *OrderType   `json:"orderType,omitempty"`
	DeliveryAddress *string      `json:"deliveryAddress,omitempty"`
	SpecialRequests *string      `json:"specialRequests,omitempty"`
	UpdatedAt       *time.Time   `json:"updatedAt,omitempty"`
}

type UpdateUserInput struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Address   *string `json:"address,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	Age       *int32  `json:"age,omitempty"`
	UserType  *string `json:"userType,omitempty"`
	Gender    *string `json:"gender,omitempty"`
	Pfp       *string `json:"pfp,omitempty"`
	IsActive  *string `json:"isActive,omitempty"`
}

type User struct {
	ID        string  `json:"id"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Role      string  `json:"role"`
	Address   *string `json:"address,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	IsActive  string  `json:"isActive"`
	Age       int32   `json:"age"`
	UserType  string  `json:"userType"`
	Pfp       *string `json:"pfp,omitempty"`
	Gender    *string `json:"gender,omitempty"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "PENDING"
	OrderStatusPreparing OrderStatus = "PREPARING"
	OrderStatusReady     OrderStatus = "READY"
	OrderStatusDelivered OrderStatus = "DELIVERED"
	OrderStatusCancelled OrderStatus = "CANCELLED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPending,
	OrderStatusPreparing,
	OrderStatusReady,
	OrderStatusDelivered,
	OrderStatusCancelled,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPending, OrderStatusPreparing, OrderStatusReady, OrderStatusDelivered, OrderStatusCancelled:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderType string

const (
	// dine-in
	OrderTypeTakeout  OrderType = "takeout"
	OrderTypeDelivery OrderType = "delivery"
)

var AllOrderType = []OrderType{
	OrderTypeTakeout,
	OrderTypeDelivery,
}

func (e OrderType) IsValid() bool {
	switch e {
	case OrderTypeTakeout, OrderTypeDelivery:
		return true
	}
	return false
}

func (e OrderType) String() string {
	return string(e)
}

func (e *OrderType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderType", str)
	}
	return nil
}

func (e OrderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
