package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"Graphql_Service/graph/model"
	"context"
)

// CreateTransactionRecords is the resolver for the createTransactionRecords field.
// CreateTransactionRecord - Insert a new transaction record
func (r *mutationResolver) CreateTransactionRecords(ctx context.Context, amountPaid float64, paymentMethod string, transactionStatus string, userID string, orderID string) (*model.Transaction, error) {
	// SQL Query to insert the new transaction
	query := `INSERT INTO public.transactions (amount_paid, payment_method, transaction_status, user_id, order_id, timestamp) 
	VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING transaction_id, amount_paid, payment_method, transaction_status, user_id, order_id, timestamp`

	// Prepare the transaction item
	item := &model.Transaction{
		AmountPaid:        amountPaid,
		PaymentMethod:     paymentMethod,
		TransactionStatus: transactionStatus,
		UserID:            userID,
		OrderID:           orderID,
	}

	// Execute the query and insert the new record into the database
	err := r.Resolver.DB3.QueryRow(query,
		item.AmountPaid, item.PaymentMethod, item.TransactionStatus,
		item.UserID, item.OrderID,
	).Scan(
		&item.TransactionID, &item.AmountPaid, &item.PaymentMethod,
		&item.TransactionStatus, &item.UserID, &item.OrderID, &item.Timestamp,
	)

	if err != nil {
		return nil, err
	}

	return item, nil
}

// GetTransactionRecordsByUserID is the resolver for the getTransactionRecordsByUserID field.
// GetTransactionRecordsByUserID - Fetch transaction records by user ID
func (r *queryResolver) GetTransactionRecordsByUserID(ctx context.Context, id string) ([]*model.Transaction, error) {
	// SQL Query to fetch all transactions for the given user ID
	query := `SELECT transaction_id, amount_paid, payment_method, transaction_status, user_id, order_id, timestamp
	          FROM public.transactions WHERE user_id = $1`

	// Execute the query
	rows, err := r.Resolver.DB3.Query(query, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// Prepare a list of transactions
	var transactions []*model.Transaction
	for rows.Next() {
		var item model.Transaction
		err := rows.Scan(
			&item.TransactionID, &item.AmountPaid, &item.PaymentMethod,
			&item.TransactionStatus, &item.UserID, &item.OrderID, &item.Timestamp,
		)
		if err != nil {
			return nil, err
		}
		transactions = append(transactions, &item)
	}

	if err = rows.Err(); err != nil {
		return nil, err
	}

	return transactions, nil
}

// ARI HIMO SA CRUD
