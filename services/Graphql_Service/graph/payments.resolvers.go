package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"Graphql_Service/graph/model"
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/google/uuid"
)

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.NewTransactionInput) (*model.Transaction, error) {

	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	if err := r.DB3.PingContext(ctx); err != nil {
		return nil, fmt.Errorf("database connection error: %v", err)
	}

	id := uuid.New()
	now := time.Now()

	stmt := `
		INSERT INTO transactions (id, order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp)
		VALUES ($1, $2, $3, $4, $5, $6, $7)
	`

	_, err := r.DB3.ExecContext(ctx, stmt,
		id, input.OrderID, input.UserID, input.AmountPaid,
		input.PaymentMethod, "PENDING", now,
	)
	if err != nil {
		return nil, err
	}

	return &model.Transaction{
		ID:                   id,
		OrderID:              input.OrderID,
		UserID:               input.UserID,
		AmountPaid:           input.AmountPaid,
		PaymentMethod:        input.PaymentMethod,
		TransactionStatus:    "PENDING",
		TransactionTimestamp: now,
	}, nil
}

func (r *mutationResolver) UpdateTransactionStatus(ctx context.Context, id uuid.UUID, status string) (*model.Transaction, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	// Validate status
	validStatuses := map[string]bool{
		"PENDING":   true,
		"COMPLETED": true,
		"FAILED":    true,
		"CANCELLED": true,
	}

	if !validStatuses[status] {
		return nil, fmt.Errorf("invalid status: %s", status)
	}

	stmt := `UPDATE transactions SET transaction_status = $1 WHERE id = $2`
	_, err := r.DB3.ExecContext(ctx, stmt, status, id)
	if err != nil {
		return nil, fmt.Errorf("failed to update transaction status: %v", err)
	}

	return r.Query().GetTransaction(ctx, id)
}

func (r *mutationResolver) CreateReceipt(ctx context.Context, input model.NewReceiptInput) (*model.Receipt, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	id := uuid.New()
	now := time.Now()

	stmt := `
		INSERT INTO receipts (id, transaction_id, user_id, amount, payment_method, timestamp)
		VALUES ($1, $2, $3, $4, $5, $6)
	`

	_, err := r.DB3.ExecContext(ctx, stmt,
		id, input.TransactionID, input.UserID, input.Amount,
		input.PaymentMethod, now,
	)
	if err != nil {
		return nil, err
	}

	return &model.Receipt{
		ID:            id,
		Transaction:   &model.Transaction{ID: input.TransactionID},
		UserID:        input.UserID,
		Amount:        input.Amount,
		PaymentMethod: input.PaymentMethod,
		Timestamp:     now,
	}, nil
}

func (r *queryResolver) GetTransaction(ctx context.Context, id uuid.UUID) (*model.Transaction, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	stmt := `
        SELECT id, order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp
        FROM transactions WHERE id = $1
    `
	row := r.DB3.QueryRowContext(ctx, stmt, id)

	var t model.Transaction
	err := row.Scan(&t.ID, &t.OrderID, &t.UserID, &t.AmountPaid, &t.PaymentMethod, &t.TransactionStatus, &t.TransactionTimestamp)
	if err == sql.ErrNoRows {
		return nil, fmt.Errorf("transaction not found: %v", id)
	}
	if err != nil {
		return nil, fmt.Errorf("failed to fetch transaction: %v", err)
	}

	return &t, nil
}

func (r *queryResolver) ListTransactions(ctx context.Context) ([]*model.Transaction, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	stmt := `
        SELECT id, order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp
        FROM transactions
        ORDER BY transaction_timestamp DESC
    `
	rows, err := r.DB3.QueryContext(ctx, stmt)
	if err != nil {
		return nil, fmt.Errorf("failed to list transactions: %v", err)
	}
	defer rows.Close()

	var transactions []*model.Transaction
	for rows.Next() {
		var t model.Transaction
		err := rows.Scan(&t.ID, &t.OrderID, &t.UserID, &t.AmountPaid, &t.PaymentMethod, &t.TransactionStatus, &t.TransactionTimestamp)
		if err != nil {
			return nil, fmt.Errorf("failed to scan transaction: %v", err)
		}
		transactions = append(transactions, &t)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating transactions: %v", err)
	}

	return transactions, nil
}

func (r *queryResolver) GetReceipt(ctx context.Context, id uuid.UUID) (*model.Receipt, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	stmt := `
        SELECT r.id, r.transaction_id, r.user_id, r.amount, r.payment_method, r.timestamp,
               t.order_id, t.amount_paid, t.transaction_status
        FROM receipts r
        JOIN transactions t ON r.transaction_id = t.id
        WHERE r.id = $1
    `
	row := r.DB3.QueryRowContext(ctx, stmt, id)

	var receipt model.Receipt
	var transaction model.Transaction
	err := row.Scan(
		&receipt.ID, &transaction.ID, &receipt.UserID, &receipt.Amount, &receipt.PaymentMethod, &receipt.Timestamp,
		&transaction.OrderID, &transaction.AmountPaid, &transaction.TransactionStatus,
	)
	if err == sql.ErrNoRows {
		return nil, fmt.Errorf("receipt not found: %v", id)
	}
	if err != nil {
		return nil, fmt.Errorf("failed to fetch receipt: %v", err)
	}

	receipt.Transaction = &transaction
	return &receipt, nil
}

func (r *queryResolver) ListReceipts(ctx context.Context) ([]*model.Receipt, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	stmt := `
        SELECT r.id, r.transaction_id, r.user_id, r.amount, r.payment_method, r.timestamp,
               t.order_id, t.amount_paid, t.transaction_status
        FROM receipts r
        JOIN transactions t ON r.transaction_id = t.id
        ORDER BY r.timestamp DESC
    `
	rows, err := r.DB3.QueryContext(ctx, stmt)
	if err != nil {
		return nil, fmt.Errorf("failed to list receipts: %v", err)
	}
	defer rows.Close()

	var receipts []*model.Receipt
	for rows.Next() {
		var rcp model.Receipt
		var transaction model.Transaction
		err := rows.Scan(
			&rcp.ID, &transaction.ID, &rcp.UserID, &rcp.Amount, &rcp.PaymentMethod, &rcp.Timestamp,
			&transaction.OrderID, &transaction.AmountPaid, &transaction.TransactionStatus,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan receipt: %v", err)
		}
		rcp.Transaction = &transaction
		receipts = append(receipts, &rcp)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating receipts: %v", err)
	}

	return receipts, nil
}
