package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"Graphql_Service/graph/model"
	service "Graphql_Service/grpc_clients"
	"context"
	"fmt"

	"github.com/CallenCaracy/ByteBites/services/Kitchen_Service/pb"
	paymentpb "github.com/CallenCaracy/ByteBites/services/Payment_Service/pb"
	"github.com/google/uuid"
)

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, orderID uuid.UUID, userID uuid.UUID, amountPaid float64, paymentMethod *model.PaymentMethod) (*model.PaymentTransaction, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	query := `
		INSERT INTO payment_transactions (order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp)
		VALUES ($1, $2, $3, $4, 'pending', NOW())
		RETURNING id, order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp`

	var transaction model.PaymentTransaction
	err := r.DB3.QueryRowContext(ctx, query,
		orderID,
		userID,
		amountPaid,
		paymentMethod,
	).Scan(
		&transaction.ID,
		&transaction.OrderID,
		&transaction.UserID,
		&transaction.AmountPaid,
		&transaction.PaymentMethod,
		&transaction.TransactionStatus,
		&transaction.TransactionTimestamp,
	)

	if err != nil {
		return nil, fmt.Errorf("failed to create transaction: %v", err)
	}

	_, err = service.KitchenClient.CreateOrderQueue(ctx, &pb.CreateOrderQueueRequest{
		OrderId: orderID.String(),
	})
	if err != nil {
		return nil, fmt.Errorf("failed to create order queue: %v", err)
	}

	_, err = service.PaymentClient.CreateTransaction(ctx, &paymentpb.CreateTransactionRequest{
		OrderID:       orderID.String(),
		UserID:        userID.String(),
		AmountPaid:    float32(amountPaid),
		PaymentMethod: string(*paymentMethod),
	})
	if err != nil {
		return nil, fmt.Errorf("failed to create transaction via PaymentService: %v", err)
	}

	return &transaction, nil
}

// UpdateTransactionStatus is the resolver for the updateTransactionStatus field.
func (r *mutationResolver) UpdateTransactionStatus(ctx context.Context, id uuid.UUID, status model.TransactionStatus) (*model.PaymentTransaction, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	query := `
		UPDATE payment_transactions 
		SET transaction_status = $2
		WHERE id = $1
		RETURNING id, order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp`

	var transaction model.PaymentTransaction
	err := r.DB3.QueryRowContext(ctx, query, id, status).Scan(
		&transaction.ID,
		&transaction.OrderID,
		&transaction.UserID,
		&transaction.AmountPaid,
		&transaction.PaymentMethod,
		&transaction.TransactionStatus,
		&transaction.TransactionTimestamp,
	)

	if err != nil {
		return nil, fmt.Errorf("failed to update transaction status: %v", err)
	}

	return &transaction, nil
}

// CreateReceipt is the resolver for the createReceipt field.
func (r *mutationResolver) CreateReceipt(ctx context.Context, transactionID uuid.UUID, userID uuid.UUID, amount float64, paymentMethod string) (*model.PaymentReceipt, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	query := `
		INSERT INTO payment_receipts (transaction_id, user_id, amount, payment_method, timestamp)
		VALUES ($1, $2, $3, $4, NOW())
		RETURNING id, transaction_id, user_id, amount, payment_method, timestamp`

	var receipt model.PaymentReceipt
	err := r.DB3.QueryRowContext(ctx, query,
		transactionID,
		userID,
		amount,
		paymentMethod,
	).Scan(
		&receipt.ID,
		&receipt.TransactionID,
		&receipt.UserID,
		&receipt.Amount,
		&receipt.PaymentMethod,
		&receipt.Timestamp,
	)

	if err != nil {
		return nil, fmt.Errorf("failed to create receipt: %v", err)
	}

	return &receipt, nil
}

// GetTransaction is the resolver for the getTransaction field.
func (r *queryResolver) GetTransaction(ctx context.Context, id uuid.UUID) (*model.PaymentTransaction, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	query := `
		SELECT id, order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp
		FROM payment_transactions
		WHERE id = $1`

	var transaction model.PaymentTransaction
	err := r.DB3.QueryRowContext(ctx, query, id).Scan(
		&transaction.ID,
		&transaction.OrderID,
		&transaction.UserID,
		&transaction.AmountPaid,
		&transaction.PaymentMethod,
		&transaction.TransactionStatus,
		&transaction.TransactionTimestamp,
	)

	if err != nil {
		return nil, fmt.Errorf("failed to get transaction: %v", err)
	}

	return &transaction, nil
}

// GetAllTransactions is the resolver for the getAllTransactions field.
func (r *queryResolver) GetAllTransactions(ctx context.Context) ([]*model.PaymentTransaction, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	query := `
		SELECT id, order_id, user_id, amount_paid, payment_method, transaction_status, transaction_timestamp
		FROM payment_transactions
		ORDER BY transaction_timestamp DESC`

	rows, err := r.DB3.QueryContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("failed to query transactions: %v", err)
	}
	defer rows.Close()

	var transactions []*model.PaymentTransaction
	for rows.Next() {
		var transaction model.PaymentTransaction
		err := rows.Scan(
			&transaction.ID,
			&transaction.OrderID,
			&transaction.UserID,
			&transaction.AmountPaid,
			&transaction.PaymentMethod,
			&transaction.TransactionStatus,
			&transaction.TransactionTimestamp,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan transaction: %v", err)
		}
		transactions = append(transactions, &transaction)
	}

	return transactions, nil
}

// GetReceipt is the resolver for the getReceipt field.
func (r *queryResolver) GetReceipt(ctx context.Context, id uuid.UUID) (*model.PaymentReceipt, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	query := `
		SELECT id, transaction_id, user_id, amount, payment_method, timestamp
		FROM payment_receipts
		WHERE id = $1`

	var receipt model.PaymentReceipt
	err := r.DB3.QueryRowContext(ctx, query, id).Scan(
		&receipt.ID,
		&receipt.TransactionID,
		&receipt.UserID,
		&receipt.Amount,
		&receipt.PaymentMethod,
		&receipt.Timestamp,
	)

	if err != nil {
		return nil, fmt.Errorf("failed to get receipt: %v", err)
	}

	return &receipt, nil
}

// GetAllReceipts is the resolver for the getAllReceipts field.
func (r *queryResolver) GetAllReceipts(ctx context.Context) ([]*model.PaymentReceipt, error) {
	if r.DB3 == nil {
		return nil, fmt.Errorf("database connection not initialized")
	}

	query := `
		SELECT id, transaction_id, user_id, amount, payment_method, timestamp
		FROM payment_receipts
		ORDER BY timestamp DESC`

	rows, err := r.DB3.QueryContext(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("failed to query receipts: %v", err)
	}
	defer rows.Close()

	var receipts []*model.PaymentReceipt
	for rows.Next() {
		var receipt model.PaymentReceipt
		err := rows.Scan(
			&receipt.ID,
			&receipt.TransactionID,
			&receipt.UserID,
			&receipt.Amount,
			&receipt.PaymentMethod,
			&receipt.Timestamp,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan receipt: %v", err)
		}
		receipts = append(receipts, &receipt)
	}

	return receipts, nil
}
