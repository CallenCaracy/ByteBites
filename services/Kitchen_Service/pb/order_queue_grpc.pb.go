// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: order_queue.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderQueueService_CreateOrder_FullMethodName = "/order_queue.OrderQueueService/CreateOrder"
	OrderQueueService_GetOrder_FullMethodName    = "/order_queue.OrderQueueService/GetOrder"
	OrderQueueService_UpdateOrder_FullMethodName = "/order_queue.OrderQueueService/UpdateOrder"
	OrderQueueService_DeleteOrder_FullMethodName = "/order_queue.OrderQueueService/DeleteOrder"
	OrderQueueService_ListOrders_FullMethodName  = "/order_queue.OrderQueueService/ListOrders"
)

// OrderQueueServiceClient is the client API for OrderQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The CRUD service definition.
type OrderQueueServiceClient interface {
	// Create a new order_queue entry
	CreateOrder(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error)
	// Get an existing order_queue entry by id
	GetOrder(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error)
	// Update an existing order_queue entry
	UpdateOrder(ctx context.Context, in *OrderUpdateRequest, opts ...grpc.CallOption) (*OrderUpdateResponse, error)
	// Delete an order_queue entry
	DeleteOrder(ctx context.Context, in *OrderDeleteRequest, opts ...grpc.CallOption) (*OrderDeleteResponse, error)
	// List orders, optionally filtered by status
	ListOrders(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
}

type orderQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderQueueServiceClient(cc grpc.ClientConnInterface) OrderQueueServiceClient {
	return &orderQueueServiceClient{cc}
}

func (c *orderQueueServiceClient) CreateOrder(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderCreateResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueServiceClient) GetOrder(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderGetResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueServiceClient) UpdateOrder(ctx context.Context, in *OrderUpdateRequest, opts ...grpc.CallOption) (*OrderUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderUpdateResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueServiceClient) DeleteOrder(ctx context.Context, in *OrderDeleteRequest, opts ...grpc.CallOption) (*OrderDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderDeleteResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueueServiceClient) ListOrders(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderListResponse)
	err := c.cc.Invoke(ctx, OrderQueueService_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderQueueServiceServer is the server API for OrderQueueService service.
// All implementations must embed UnimplementedOrderQueueServiceServer
// for forward compatibility.
//
// The CRUD service definition.
type OrderQueueServiceServer interface {
	// Create a new order_queue entry
	CreateOrder(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error)
	// Get an existing order_queue entry by id
	GetOrder(context.Context, *OrderGetRequest) (*OrderGetResponse, error)
	// Update an existing order_queue entry
	UpdateOrder(context.Context, *OrderUpdateRequest) (*OrderUpdateResponse, error)
	// Delete an order_queue entry
	DeleteOrder(context.Context, *OrderDeleteRequest) (*OrderDeleteResponse, error)
	// List orders, optionally filtered by status
	ListOrders(context.Context, *OrderListRequest) (*OrderListResponse, error)
	mustEmbedUnimplementedOrderQueueServiceServer()
}

// UnimplementedOrderQueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderQueueServiceServer struct{}

func (UnimplementedOrderQueueServiceServer) CreateOrder(context.Context, *OrderCreateRequest) (*OrderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderQueueServiceServer) GetOrder(context.Context, *OrderGetRequest) (*OrderGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderQueueServiceServer) UpdateOrder(context.Context, *OrderUpdateRequest) (*OrderUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderQueueServiceServer) DeleteOrder(context.Context, *OrderDeleteRequest) (*OrderDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderQueueServiceServer) ListOrders(context.Context, *OrderListRequest) (*OrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedOrderQueueServiceServer) mustEmbedUnimplementedOrderQueueServiceServer() {}
func (UnimplementedOrderQueueServiceServer) testEmbeddedByValue()                           {}

// UnsafeOrderQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderQueueServiceServer will
// result in compilation errors.
type UnsafeOrderQueueServiceServer interface {
	mustEmbedUnimplementedOrderQueueServiceServer()
}

func RegisterOrderQueueServiceServer(s grpc.ServiceRegistrar, srv OrderQueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderQueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderQueueService_ServiceDesc, srv)
}

func _OrderQueueService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).CreateOrder(ctx, req.(*OrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueueService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).GetOrder(ctx, req.(*OrderGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueueService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).UpdateOrder(ctx, req.(*OrderUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueueService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).DeleteOrder(ctx, req.(*OrderDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueueService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueueServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueueService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueueServiceServer).ListOrders(ctx, req.(*OrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderQueueService_ServiceDesc is the grpc.ServiceDesc for OrderQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_queue.OrderQueueService",
	HandlerType: (*OrderQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderQueueService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderQueueService_GetOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderQueueService_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _OrderQueueService_DeleteOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _OrderQueueService_ListOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_queue.proto",
}
